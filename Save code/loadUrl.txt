/ Bi·∫øn to√†n c·ª•c trong class (NewTabController)
    private String lastSavedUrl = "";
    private String pendingUrl = "";
    private boolean manualLoad = false;

public void loadUrl() {
        manualLoad = true;
        String inputUrl = search.getText().trim();
        if (inputUrl.isEmpty()) return;

        final String url = normalizeUrl(inputUrl);
        atHome = false;
        mainBackground.setVisible(false);
        historyBrowser.setVisible(false);
        webView.setVisible(true);

        WebEngine engine = webView.getEngine();

        // ‚öôÔ∏è Gi·∫£ l·∫≠p tr√¨nh duy·ªát Chrome ƒë·ªÉ t∆∞∆°ng th√≠ch t·ªët h∆°n v·ªõi HTTPS
        engine.setUserAgent(
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) " +
                        "AppleWebKit/537.36 (KHTML, like Gecko) " +
                        "Chrome/120.0.0.0 Safari/537.36"
        );

        Worker<Void> worker = engine.getLoadWorker();

        // L·∫Øng nghe tr·∫°ng th√°i t·∫£i trang
        ChangeListener<Worker.State> oneShot = new ChangeListener<>() {
            @Override
            public void changed(ObservableValue<? extends Worker.State> obs,
                                Worker.State oldState,
                                Worker.State newState) {
                if (newState == Worker.State.SUCCEEDED) {
                    // ‚úÖ Load th√†nh c√¥ng
                    worker.stateProperty().removeListener(this);

                    String title = engine.getTitle();
                    if (title == null || title.isEmpty()) title = "Unknown";
                    setCurrentPageTitle(title);

                    // G·ª≠i l∆∞u l·ªãch s·ª≠ n·∫øu c√≥ ƒëƒÉng nh·∫≠p
                    if (currentId != null && currentUsername != null) {
                        try {
                            Message request = new Message();
                            request.getData().put("action", "add_visit");
                            request.getData().put("user_id", currentId);
                            request.getData().put("url", url);
                            request.getData().put("title", title);
                            request.getData().put("hidden", false);
                            sendRequest(request);
                        } catch (Exception ex) {
                            ex.printStackTrace();
                        }
                    }
                }
                // ‚ùå Load th·∫•t b·∫°i ‚Üí hi·ªÉn th·ªã trang l·ªói
                else if (newState == Worker.State.FAILED || newState == Worker.State.CANCELLED) {
                    worker.stateProperty().removeListener(this);

                    System.out.println("‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i trang: " + url);
                    Platform.runLater(() -> {
                        // ‚ö†Ô∏è Gi·ªØ nguy√™n URL ng∆∞·ªùi d√πng nh·∫≠p trong TextField
                        search.setText(url);

                        // ‚ö†Ô∏è Load trang l·ªói nh∆∞ng KH√îNG ƒë·ªïi URL trong thanh ƒë·ªãa ch·ªâ
                        engine.loadContent(
                                "<iframe src='https://doleviettai.github.io/ViewWebError/' " +
                                        "style='width:100%;height:100%;border:none;'></iframe>"
                        );

                        setCurrentPageTitle("Kh√¥ng th·ªÉ truy c·∫≠p trang web n√†y");
//                        showBrowserAlert("Kh√¥ng th·ªÉ truy c·∫≠p trang web n√†y");
                    });
                }
            }
        };

        // G·∫Øn listener
        worker.stateProperty().addListener(oneShot);

        // X·ª≠ l√Ω ngo·∫°i l·ªá khi load trang
        worker.exceptionProperty().addListener((obs, old, ex) -> {
            if (ex != null) {
                System.out.println("‚ùå Exception khi load trang: " + ex.getMessage());
                Platform.runLater(() -> {
                    search.setText(url);
                    engine.loadContent(
                            "<iframe src='https://doleviettai.github.io/ViewWebError/' " +
                                    "style='width:100%;height:100%;border:none;'></iframe>"
                    );
                    setCurrentPageTitle("Kh√¥ng th·ªÉ truy c·∫≠p trang web n√†y");
                });
            }
        });

        engine.setOnError(e -> {
            System.out.println("‚ùå WebView Error: " + e.getMessage());
            Platform.runLater(() -> {
                search.setText(url);
                engine.loadContent(
                        "<iframe src='https://doleviettai.github.io/ViewWebError/' " +
                                "style='width:100%;height:100%;border:none;'></iframe>"
                );
                setCurrentPageTitle("Kh√¥ng th·ªÉ truy c·∫≠p trang web n√†y");
            });
        });

        // B·∫Øt ƒë·∫ßu t·∫£i trang
        try {
            engine.load(url);
        } catch (Exception ex) {
            System.out.println("‚ö†Ô∏è URL load error: " + ex.getMessage());
            search.setText(url);
            engine.loadContent(
                    "<iframe src='https://doleviettai.github.io/ViewWebError/' " +
                            "style='width:100%;height:100%;border:none;'></iframe>"
            );
            setCurrentPageTitle("Kh√¥ng th·ªÉ truy c·∫≠p trang web n√†y");
        }
    }

private void loadUrlWhenPathChanges(){
        // Trong loadUrlWhenPathChanges():
        if (manualLoad) {
            manualLoad = false; // b·ªè qua l·∫ßn ƒë·∫ßu
            return;
        }
        engine.locationProperty().addListener((obs, oldLoc, newLoc) -> {
            if (newLoc == null || newLoc.isEmpty()) return;

            // Khi URL thay ƒë·ªïi ‚Üí l∆∞u v√†o pending
            if (!newLoc.equals(oldLoc)) {
                pendingUrl = newLoc;
                search.setText(newLoc); // C·∫≠p nh·∫≠t thanh ƒë·ªãa ch·ªâ
                System.out.println("üåê URL thay ƒë·ªïi: " + newLoc);
            }
        });

        // Khi trang load xong (sau khi URL thay ƒë·ªïi)
        engine.getLoadWorker().stateProperty().addListener((obs, oldState, newState) -> {
            if (newState == Worker.State.SUCCEEDED) {
                String currentUrl = engine.getLocation();

                // Ch·ªâ g·ª≠i n·∫øu kh√°c URL tr∆∞·ªõc ƒë√≥ v√† ƒë√∫ng URL ƒëang pending
                if (currentUrl != null && !currentUrl.equals(lastSavedUrl) && currentUrl.equals(pendingUrl)) {
                    String title = engine.getTitle();
                    if (title == null || title.isEmpty()) title = "Unknown";

                    if (currentId != null && currentUsername != null) {
                        try {
                            Message request = new Message();
                            request.getData().put("action", "add_visit");
                            request.getData().put("user_id", currentId);
                            request.getData().put("url", currentUrl);
                            request.getData().put("title", title);
                            request.getData().put("hidden", false);
                            sendRequest(request);
                            System.out.println("üìú ƒê√£ l∆∞u l·ªãch s·ª≠ truy c·∫≠p: " + title + " (" + currentUrl + ")");
                        } catch (Exception ex) {
                            ex.printStackTrace();
                        }
                    }

                    lastSavedUrl = currentUrl;
                    pendingUrl = ""; // reset
                }
            }
        });
    }

@Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
loadUrlWhenPathChanges();
// G√µ Enter ƒë·ªÉ load URL
        search.setOnKeyPressed((KeyEvent e) -> {
            if (e.getCode() == KeyCode.ENTER) {
                loadUrl();
            }
        });
}


ch·ªânh l·∫°i 3 h√†m n√†y